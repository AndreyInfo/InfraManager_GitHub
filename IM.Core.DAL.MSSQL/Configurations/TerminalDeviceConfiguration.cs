// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using InfraManager.DAL.Asset;
using InfraManager.DAL.EntityConfigurations;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore;


namespace InfraManager.DAL.Microsoft.SqlServer.Configurations
{
    public partial class TerminalDeviceConfiguration : TerminalDeviceConfigurationBase
    {
        protected override string PrimaryKeyName => "PK_Оконечное оборудование";
        protected override string TerminalDeviceModelForeignKeyName => "FK_TerminalDevice_TerminalDeviceModel";
        protected override string WorkplaceForeignKeyName => "FK_Оконечное оборудование_Рабочее место";
        protected override string SnmpTokenForeignKeyName => "FK_TerminalDevice_SnmpToken";
        protected override string RoomForeignKeyName => "FK_TerminalDevice_Room";
        protected override string WorkplaceIDColumnName => "ИД рабочего места";
        protected override string IMObjIDIndexName => "IX_TerminalDevice_IMObjID";
        protected override string TerminalDeviceModelIDIndexName => "IX_TerminalDevice_ModelID";
        protected override string WorkplaceIDIndexName => "IX_TerminalDevice_WorkplaceID";

        protected override void ConfigureDatabase(EntityTypeBuilder<TerminalDevice> builder)
        {
            builder.ToTable("Оконечное оборудование", "dbo");

            builder.Property(x => x.ID).HasColumnName("Идентификатор");
            builder.Property(x => x.TypeID).HasColumnName("ИД типа ОО");
            builder.Property(x => x.Name).HasColumnName("Название");
            builder.Property(x => x.UserID).HasColumnName("ИД пользователя");
            builder.Property(x => x.IpAddress).HasColumnName("IP-address");
            builder.Property(x => x.IpMask).HasColumnName("IP-mask");
            builder.Property(x => x.RoomID).HasColumnName("ИД комнаты");
            builder.Property(x => x.Note).HasColumnName("Примечание");
            builder.Property(x => x.MacAddress).HasColumnName("MAC-address");
            builder.Property(x => x.Connected).HasColumnName("Connected").HasDefaultValueSql("0");
            builder.Property(x => x.Connection1).HasDefaultValueSql("('')");
            builder.Property(x => x.VisioID).HasColumnName("Visio_ID");
            builder.Property(x => x.Removed).HasColumnName("Removed").HasDefaultValueSql("0");
            builder.Property(x => x.DateRemoved).HasColumnName("DateRemoved").HasColumnType("smalldatetime");
            builder.Property(x => x.InvNumber).HasColumnName("Инвентарный номер");
            builder.Property(x => x.Cpu).HasColumnName("Процессор");
            builder.Property(x => x.ClockFrequency).HasColumnName("Такт частота");
            builder.Property(x => x.Bios).HasColumnName("BIOS");
            builder.Property(x => x.Bus).HasColumnName("Шина");
            builder.Property(x => x.Memory).HasColumnName("Память");
            builder.Property(x => x.VideoAdapter).HasColumnName("Видеоадаптер");
            builder.Property(x => x.Keyboard).HasColumnName("Клавиатура");
            builder.Property(x => x.Mouse).HasColumnName("Мышь");
            builder.Property(x => x.SerialPorts).HasColumnName("Последовательных портов");
            builder.Property(x => x.ParallelPorts).HasColumnName("Параллельных портов");
            builder.Property(x => x.OperatingSystem).HasColumnName("Операционная система");
            builder.Property(x => x.DefaultPrinter).HasColumnName("Принтер по умолчанию");
            builder.Property(x => x.ExternalID).HasColumnName("ExternalID").HasDefaultValueSql("('')");
            builder.Property(x => x.FrameType).HasColumnName("FrameType");
            builder.Property(x => x.AssetTag).HasColumnName("AssetTag");
            builder.Property(x => x.Cpusocket).HasColumnName("CPUSocket");
            builder.Property(x => x.Usbexist).HasColumnName("USBExist");
            builder.Property(x => x.Monitor).HasColumnName("Monitor");
            builder.Property(x => x.MonitorResolution).HasColumnName("MonitorResolution");
            builder.Property(x => x.Osver).HasColumnName("OSVer");
            builder.Property(x => x.SerialNumber).HasColumnName("SerialNumber");
            builder.Property(x => x.Biosver).HasColumnName("BIOSVer");
            builder.Property(x => x.VideoMemory).HasColumnName("VideoMemory");
            builder.Property(x => x.Connection).HasColumnName("Connection").HasDefaultValueSql("('')");
            builder.Property(x => x.CsVendorID).HasColumnName("CsVendorID").HasDefaultValueSql("(0)");
            builder.Property(x => x.CsModel).HasColumnName("CsModel");
            builder.Property(x => x.CsSize).HasColumnName("CsSize");
            builder.Property(x => x.CsFormFactor).HasColumnName("CsFormFactor");
            builder.Property(x => x.MbVendorID).HasColumnName("MbVendorID").HasDefaultValueSql("(0)");
            builder.Property(x => x.MbModel).HasColumnName("MbModel");
            builder.Property(x => x.MbChipSet).HasColumnName("MbChipSet");
            builder.Property(x => x.MbSlots).HasColumnName("MbSlots");
            builder.Property(x => x.ConnectorID).HasColumnName("ConnectorID");
            builder.Property(x => x.TechnologyID).HasColumnName("TechnologyID");
            builder.Property(x => x.Code).HasColumnName("Code");
            builder.Property(x => x.ConnectedPortID).HasColumnName("ConnectedPortID");
            builder.Property(x => x.IMObjID).HasColumnName("IMObjID").HasDefaultValueSql("(newid())");
            builder.Property(x => x.PowerConsumption).HasColumnName("PowerConsumption").HasColumnType("decimal(10, 2)");
            builder.Property(x => x.RowVersion).HasColumnName("RowVersion").HasColumnType("timestamp").IsRowVersion().IsConcurrencyToken();
            builder.Property(x => x.PeripheralDatabaseID).HasColumnName("PeripheralDatabaseID");
            builder.Property(x => x.ComplementaryID).HasColumnName("ComplementaryID");
            builder.Property(x => x.ComplementaryGuidID).HasColumnName("ComplementaryGuidID");
            builder.Property(x => x.LogicalLocation).HasColumnName("LogicalLocation").IsUnicode(false);
            builder.Property(x => x.Description).HasColumnName("Description").IsUnicode(false);
            builder.Property(x => x.Identifier).HasColumnName("Identifier").IsUnicode(false);
            builder.Property(x => x.SnmpTokenID).HasColumnName("SnmpTokenID");
            builder.Property(x => x.CpucoreNumber).HasColumnName("CPUCoreNumber");
            builder.Property(x => x.Cpunumber).HasColumnName("CPUNumber");
            builder.Property(x => x.Cpumodel).HasColumnName("CPUModel");
            builder.Property(x => x.DiskType).HasColumnName("DiskType");
            builder.Property(x => x.CpuautoInfo).HasColumnName("CPUAutoInfo");
            builder.Property(x => x.DiskAutoInfo).HasColumnName("DiskAutoInfo");
            builder.Property(x => x.RamautoInfo).HasColumnName("RAMAutoInfo");
            builder.Property(x => x.DiskSpaceTotal).HasColumnName("DiskSpaceTotal").HasColumnType("real");
            builder.Property(x => x.Ramspace).HasColumnName("RAMSpace").HasColumnType("real");
            builder.Property(x => x.CpuclockFrequency).HasColumnName("CPUClockFrequency").HasColumnType("real");
            builder.Property(x => x.InfrastructureSegmentID).HasColumnName("InfrastructureSegmentID");

            OnConfigurePartial(builder);
        }

        partial void OnConfigurePartial(EntityTypeBuilder<TerminalDevice> builder);
    }
}