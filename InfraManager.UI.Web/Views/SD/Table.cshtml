@model InfraManager.UI.Web.Models.Asset.TableAvailabilityModel
<style>
    .b-main {
        overflow: hidden;
    }

    #regionToolbarFilters {
        width: inherit;
    }

    #placeForListViewPanel {
        order: 3;
        -ms-flex-order: 3;
        background-color: #f3f7f9;
    }

    #placeForListViewPanel.ko_ListView .tableContainer {
        border: none;
        float: right;
    }

    .b-tableList-custom {
        position: relative;
    }

    .b-tableList-custom .ui-dialog {
        position: relative !important;
        width: 100% !important;
        box-shadow: none !important;
        top: auto !important;
        left: auto !important;
        z-index: 98 !important;
    }

    .b-tableList-custom .ui-dialog-content {
        height: 100% !important;
        width: 100% !important;
    }

    .b-tableList-custom .rightToolbarButtons {
        float: left;
    }

    .b-tableList-custom .form-footer {
        padding-bottom: 10px;
    }

    .b-tableList-custom .horizontalContainer {
        display: flex;
        flex-direction: column;
    }

    .b-tableList-custom .horizontalContainer .horizontalContainer-rightPart {
        width: 100%;
        max-width: 100%;
    }

    .b-tableList-custom .horizontalContainer .form-user-rightside {
        display: flex;
        flex-direction: column;
    }

    .b-tableList-custom .horizontalContainer-rightPart {
        padding: 10px 15px;
    }

    .b-tableList-view-entity__content {
        width: calc(100% - 4px);
    }

    .b-tableList-left:not(.is-not-show-entity) {
        display: flex;
        position: absolute;
        left: 0;
        top: 0;
        bottom: 0;
    }

    .is-not-show-entity {
        display: flex;
        display: -ms-flexbox;
        flex-wrap: nowrap;
        -ms-flex-wrap: nowrap;
        flex-direction: row;
        -ms-flex-direction: row;
        justify-content: flex-start;
        -ms-flex-pack: start;
        align-items: flex-start;
        -ms-flex-align: start;
        background-color: #fff;
        height: 100%;
    }

    .b-tableList-right {
        display: flex;
        height: 100%;
        position: absolute;
        right: 0;
        top: 0;
        bottom: 0;
    }

    .b-tableList-right .b-requestDetail {
        left: 2px;
    }

    .b-tableList-left__line {
        background: var(--color-gray);
        width: 4px;
        height: 100%;
        cursor: w-resize;
    }
</style>

<div class="b-tableList-custom is-not-show-entity" id="mainWrapper">
    <div id="mainWrapperLeft" class="b-tableList-left">
        <div id="regionListMode" class="region-ListMode" data-bind="template: {name: '../UI/Lists/SD/Table.ListMode', afterRender: AfterRender}"></div>
        <div class="b-content b-content-table region-rightMainBlock">
            <div class="b-content-table__icons clearfix">
                <div class="b-wrapperWide top-table-region">
                    <div id="regionFiltersButtons" class="region-FiltersButtons" data-bind="template: {name: 'Table/FilterButtonsBlock', afterRender: AfterRender}"></div>
                    <div id="regionToolbarFilters" class="toolbar-filters" data-bind="template: {name: 'Filter/CurrentFilter', afterRender: AfterRender}"></div>
                    <div id="placeForListViewPanel" class="ko_ListView">
                        <div class="tableContainer"></div>
                    </div>
                </div>
            </div>
            <div id="listRegion" class="b-wrapperWide main-table-region">
                <div id="regionFiltration" class="region-Filtration" data-bind="style: { 'min-width': Width()+'px', 'max-width': Width()+'px'}, template: {name: 'Table/FiltrationBlock', afterRender: AfterRender}"></div>
                <div id="regionTable" class="region-Table dockFillListView"
                    data-bind="koListView: {
                        settingsName: '', 
                        controlInitialized: listViewInit, 
                        controlRendered: listViewRender, 
                        retrieveVirtualItems: listViewRetrieveVirtualItems, 
                        virtualMode: true, 
                        itemClick: listViewRowClick, 
                        contextMenu: listViewContextMenu, 
                        getObjectID: getObjectID, 
                        drawCell: listViewDrawCell
                    }"></div>
                <div id="regionContextMenu" data-bind="koContextMenu: {controlInitialized: contextMenuInit, opening: contextMenuOpening}"></div>
            </div>
        </div>
    </div>
    <!-- ko if: showEntityModel.Visible -->
        <div id="mainWrapperRight" class="b-tableList-right">
            <div class="b-tableList-left__line" id="showEntityResize"></div>
            <div id="mainWrapperRightContent" class="b-tableList-view-entity__content"></div>
        </div>
    <!-- /ko -->
</div>
<span id="regionEditFilter" data-bind="template: {name: 'Filter/EditCurrentFilter', afterRender: AfterRender}"></span>

<script type="text/javascript">
    @section MainScript {
    functionsAvailability.SoftwareDistributionCentres = @Html.Raw(Json.Serialize(Model.SoftwareDistributionAvailabilityModel.SoftwareDistributionCentres));

    require(['jquery', 'knockout'], function ($, ko) {
        {//set size of elements
            var setSizeOfControls = function () {
                var pageHeight = getPageContentHeight();
                $('.region-ListMode').css('height', pageHeight + "px");//чтобы линия была до самого низа
                //
                var rightPart_height = pageHeight - $(".b-content-table__icons").outerHeight();
                $('.region-Filtration').css('height', rightPart_height + "px");//контейнер должен быть такой же высоты
                $('#regionTable').css('height', rightPart_height + "px");//контейнер должен быть такой же высоты
            };
            //
            setSizeOfControls();
            $(window).resize(setSizeOfControls);
        }
        //
        {//compatibility with old code (filters)
            var oldTableModel = {
                ScrollUp: function () { },                      //ignore it
                columnList: ko.observableArray([]),             //ignore it
                rowList: ko.observableArray([]),                //ignore it
                isLoading: ko.observable(false),                //ignore it
                Reload: null,                                   //wrapper to reload
                load: null,                                     //wrapper to load
                filtersBlockModel: null,                        //set in filtrationBlock, ignore it
                selectedItemsTemplate: 'SDTable/TableSelectedItems',//using to get currentView in Filter! Ah!
                listViewRendered: $.Deferred(),                 //using to put into listview filtration panel
            };
        }
        //
        {//listMode
            var listModeD = $.Deferred();
            //
            require(['ui_lists/SD/Table.ListMode'], function (vm) {
                var mod = new vm.ViewModel();
                ko.applyBindings(mod, document.getElementById('regionListMode'));
                listModeD.resolve(mod);
            });
        }
        //
        {//filters
            var filterBlockD = $.Deferred();
            var filterD = $.Deferred();
            //
            require(['models/Table/FiltrationBlock'], function (vm) {
                var filterBlockModel = new vm.ViewModel(oldTableModel, filterD);
                filterBlockModel.filterLocationVisible(false);
                filterBlockModel.filterOrgstructureVisible(false);
                filterBlockModel.filterProductCatalogueVisible(false);
                filterBlockModel.filterCommonFiltersVisible(false);
                filterBlockModel.filterActiveVisible(true);
                ko.applyBindings(filterBlockModel, document.getElementById('regionFiltration'));
                filterBlockD.resolve(filterBlockModel);
            });
        }
        //
        {//table & contextMenu
            var tableD = $.Deferred();
            //
            require(['ui_lists/SD/Table', 'ui_controls/ListView/ko.ListView'], function (vm) {
                $.when(listModeD, filterD).done(function (listModeModel) {//listModeD - for viewName, filterD - for attrs to load data
                    var tableVM = new vm.ViewModel(listModeModel, oldTableModel);//oldTableModel - filters are cause (to set load, reload func, for attr to load data)
                    ko.applyBindings(tableVM, document.getElementById('regionTable'));

                    tableD.resolve(tableVM);
                    setSizeOfControls();
                    //
                    hideSpinner($('.b-main')[0]);
                    //
                    require(['ui_lists/SD/Table.ContextMenu', 'ui_controls/ContextMenu/ko.ContextMenu'], function (vm) {
                        var cm = new vm.ViewModel(tableVM);//tableVM - bind contextMenu to listView
                        ko.applyBindings(cm, document.getElementById('regionContextMenu'));
                    });
                    //move filter panel to contentPanel of listView
                    $.when(oldTableModel.listViewRendered).done(function (elements) {
                        $('#placeForListViewPanel .tableContainer').append($('#regionTable .tableControlPanel').addClass('big'));
                    });
                });
            });
        }
        //
        {//references
            $.when(filterD, listModeD, filterBlockD, tableD).done(function (filterModel, listModeModel, filterBlockModel, tableVM) {
                listModeModel.tableModel = tableVM;//to draw modified objects count
                listModeModel.filtersModel = filterModel;//when viewMode chaned, nedd to load new filters
                listModeModel.ready(true);//start to draw
            });
        }
    });
    }
</script>
